spt_lint.lua Warnings

SUMMARY OF WARNINGS

	Call has more arguments than expected
	  A macro call has more arguments than the definition has parameters. Nothing
	  will be reported if verbosity level is 0 and the number of unused parameters
	  (unused="true" in the macro documentation block) equals or exceeds the number
	  of extra arguments. Nothing will also be reported if verbosity is less than
	  two and the macro has "stub" in its name.

	Call has less arguments than expected
	  A macro call has less arguments than the definition has parameters. Nothing
	  will be reported if verbosity level is less than two and the number of
	  optional parameters (optional="true" in the macro documentation block) equals
	  or exceeds the number of missing arguments. Nothing will be reported at
	  any verbosity level for a macro that has "filetrans" in its name that is
	  short one argument.

	Not declared in policy
	  An identifier outside of a macro is not declared anywhere in policy.
	  Does not check classes, permissions, or strings.

	Not declared in module
	  An identifier outside of a macro is not declared in the module it is used in.
	  Identifiers used in a base module that are declared in another base module
	  are not reported. Identifiers used in a non-base module that are declared
	  in a base module are reported at verbosity levels 1 and higher.
	  Does not check sensitivities, categories, classes, permissions, or strings.
	
	Used but not declared in policy
	  An identifier is used in a macro, but not declared anywhere in policy. This
	  can only happen in a macro that is not used, because it would otherwise
	  cause an error.
	  Does not check: class, perm, string, tunable, level, and range

	Required but not declared in policy
	  An identifier in a macro is required, but not declared anywhere in policy.
	  The macro will always be removed from policy.
	  Does not check: class, perm, and string

	Duplicate declaration
	  An identifier is declared more than once. There is the possibility of false
	  positives if the declaration happens in an ifdef. Roles are allowed to be
	  declared multiple times, so they are not reported. Duplicate declarations
	  that occur in the same module are only reported at verbosity level 3, since
	  these are most likely to be a false positive.

	Used but not required in non-base modules
  	  An identifier in a macro is used but not declared in the macro or required.
	  Non-local modules should use macros to write policy involving identifiers
	  declared in other modules. Local modules should put used identifiers in
	  require blocks. Modules that form the base module can violate this convention
	  when referring to the identifiers in other modules that will be a part of the
	  base module.
	  Does not check: class, perm, string, tunable, level, and range

	Required but not used in non-base modules
	  An identifier is required, but not used in the block. There can be legitimate
	  reasons for doing this, but it can cause suprising behavior because it is
	  normally expected that a block will remain if all the identifiers used in the
	  block are declared and this can break that behavior.
	  Does not check: class, perm, and string

	Used but not declared in non-base modules
	  An identifier is used in a macro but declared external to the module.
	  Non-local modules should use macros to write policy involving identifiers
	  declared in other modules.
	  Does not check: class, perm, string, level and range

	Required but not declared in non-base modules
	  An identifier is required in a macro, but declared external to the module.
	  Normally, identifiers that are required are declared in the module. In this
	  case, if the module containing the external declaration is removed, the
	  macro would also be removed.
	  Does not check: class, perm, and string

	Macro require in inactive policy satisfied external to the module
	  The require block for a macro is completely satisified without relying on
	  any declarations made within the module. This means that the macro will be
	  included in the policy even though the module is inactive (set to off in
	  modules.conf). This behavior occurs because all macros are gathered together
	  regardless of whether or not the module is on or off.
	  Does not check: class, perm, and string

	Macro require in active policy satisfied external to the module
	  The require block for a macro is completely satisfied without relying on
	  any declarations made within the module. This means that the macro will
	  always be included in the policy. This really only becomes a problem if
	  the module is later made inactive.
	  Does not check: class, perm, and string

	Base modules conflicting with other base modules
	Non-base modules conflicting with base modules
	Non-base modules conflicting with other non-base modules
	  Identifies modules that cannot be installed at the same time because they
	  have one or more duplicate declarations. Conflicting modules are always
	  reported.

	Base modules needed by other base modules
	Base modules needed by non-base modules
	Non-base, non-contrib modules needed by other non-base, non-contrib modules
	Non-base, non-contrib modules needed by contrib modules
	Contrib modules needed by other contrib modules
	Non-base modules needed by base modules
	  Identifies modules that cannot be installed without another module because
	  they are dependent on either a declaration or macro definition from that
	  module. Only the case of a non-base module being needed by a base module is
	  normally reported because this is always a problem. On the other hand, a
	  module depending on a base module is never a problem, since the base module
	  must be installed, and is only reported at the highest verbosity levels for
	  informational purposes.

	Call to deprecated macro
	  A call is made to a macro that has been deprecated. The call should be updated
	  to use the new call.

	Call to unimplemented macro
	  A call is made to a macro that has not been implemented. This occurs in
	  Fedora's policy when policy brought in from Refpolicy refers to macros that
	  do not exist. It is easier to create a macro that gives a warning and then
	  fill in the macro later.

DETAILED LIST OF WARNING

	 Verbosity Level 0

	 [Errors]
	 - Need to do "make conf" to create corenetwork files
	 - Did not find expected token when parsing
	 - Improper comma list
	 - Improper category range
	 - Invalid MLS range
	 - Did not get true or false for a boolean value
	 - Invalid constraint leaf expression
	 - Did not get expected value for default rule
	 - Did not get expected value for default_range rule
	 - Expected a number for sens or cat, but got something else
	 - Invalid file type for filecon rule
	 - Invalid protocol for portcon rule
	 - Ran out of symbols when skipping a block
	 - Expect some sort of bracket when starting to skip a block
	 - Found a set definition unexpectedly
	 - Found a macro definition inside a macro definition
	 - Found a rule that should not be in the block being parsed
	 - Expected the start of a file, but got a token
	 - Failed to open the build.conf file
	 - Failed to open the module.conf file
	 - Failed to open file to get the comments
	 - Failed to open file to get the interface and template parameter information

	 [Warnings]
	 - Stray "/" in fc file
	 - Found ifelse block (Which is m4 and not Refpolicy)
	 - Module name is not the same as filename
	 - Unexpected symbol found where a rule kind is expected
	 - Unexpected symbol found where an interface or template is expected
	 - Unexpected symbol found in *.if file
	 - Unused macro parameter
	 - Call has less arguments then needed (and one or more are not optional)
	 - Call has more arguments then needed (and one or more are not marked as unused)
	 - Unable to process any more macros [Only occurs if there are circular
	   references]
	 - Duplicate macro definition in active files
	 - Location of previous macro definition when there is a duplicate macro
	   definition in active files
	 - No macro definition for a call
	 - Macro is defined in inactive policy and is called, at least once, outside of
	   an optional block.
	 - Module is listed more than once
	 - Module has an invalid value assigned in modules conf file
	 - Module name listed in modules conf file not found
	 - Recursive class permission set definition
	 - Unexpected token found
	 - Duplicate definition of class obj_perm_set
	 - Duplicate definition of permission obj_perm_set
	 - Ambiguous definition of obj_perm_set called
	 - Used but not declared (Does not check: class, perm, string, tunable, level,
	   and range)
	 - Required but not declared (Does not check: class, perm, and string)
	 - Macro require in inactive policy satisfied external to the module (Does not
	   check: class, perm, and string)
	 - Identifier not declared in policy
	 - Identifier not declared in module - For an identifier declared in a non-base
	   module and used in a different non-base module.
	 - Identifier is declared more than once and in different files.
	 - Non-base modules needed by base modules
	 - Call to macro declared in a non-base module in a base module outside of an
	   optional block

	 Verbosity Level 1

	 [Warnings]
	 - Call has more arguments then needed (regardless of whether they are unused
	   or not)
	 - List of macros and the calls they contain not processed (When unable to
	   process any more macros)
	 - Duplicate macro definition in inactive files
	 - Location of previous macro definition when there is a duplicate macro
	   definition in inactive files
	 - List of places where an undefined macro is called
	 - Used but not required in non-base modules (Does not check: class, perm,
	   string, tunable, level, and range)
	 - Required but not used in non-base modules (Does not check: class, perm,
	   and string)
	 - For inactive macro with require satisfied externally, write out where each
	   require is declared
	 - Identifier not declared in module - For an identifier declared in a base
	   module and used in a non-base module.
	 - Contrib modules needed by other contrib modules

	 Verbosity Level 2

	 [Warnings]
	 - Call has less aguments then needed (regardless whether they are optional
	   or not)
	 - Macro is defined in inactive policy, but called in active policy
	 - Used but not declared in module (Does not check: class, perm, string, level,
	   and range)
	 - Required but not declared in module (Does not check: class, perm, and string)
	 - Macro require in active policy satisfied external to the module (Does not
	   check: class, perm, and string)
	 - For active macro with requires satisfied externally, write out where each
	   require is declared
	 - For all macros with requires satisfied externally, write out where the macro
	   is called
	 - List of empty macro definitions created for undefined macros
	 - Used but not required in base modules (Does not check: class, perm, string,
	   tunable, level, and range)
	 - Required but not used in base modules (Does not check: class, perm, and
	   string)
	 - Non-base, non-contrib modules needed by other non-base, non-contrib modules
	 - Non-base, non-contrib modules needed by contrib modules

	 Verbosity Level 3

	 [Warnings]
	 - Found MCS categories for gen_context()
	 - Found MCS categories for gen_user()
	 - Found argument pass-through (In m4, "$*" passes all arguments to the macro
	   being called)
	 - Found require block outside of a macro definition. This is not wrong and
	   occurs in a few places, but it is unusual
	 - Identifier declared more than once in the same module.
	 - Base modules needed by other base modules
	 - Base modules needed by non-base modules
	 - Use of quotes in gen_tunable() block. They are not needed, but seem to work
	 - Call to macro declared in a non-base module in a non-base module outside of
	   an optional block
